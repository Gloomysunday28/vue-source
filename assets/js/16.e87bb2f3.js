(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{339:function(t,s,i){"use strict";i.r(s);var o=i(33),e=Object(o.a)({},(function(){var t=this,s=t.$createElement,i=t._self._c||s;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"总结"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),i("p",[t._v("Vue函数下具有很多全局的api, 运用的不错可以完成挺多的意想不到的功能"),i("font-bold",[t._v("(当然有些东西需要放到对应的模块里去讲比较合适)")]),t._v(",本篇文章来再次回顾下之前讲的一些东西")],1),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Vue.config")]),t._v(" "),i("p",[t._v("通过之前的介绍我们知道config下存了很多属性, 最重要的有两个"),i("font-bold",{attrs:{color:"blue"}},[t._v("optionMergeStrategies")]),t._v("、"),i("font-bold",{attrs:{color:"blue"}},[t._v("_lifecycleHooks")]),t._v(", 他们的作用我会在之后对应的模块里讲到")],1)]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("base属性")]),t._v(" "),i("p",[t._v("Vue.options._base = Vue\n大家以后可以去这里取Vue函数, 不需要再引入一个包")])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("buildInComponent")]),t._v(" "),i("p",[t._v("Vue内置了Keep-alive组件，我们在全局函数调用的时候会将该组件存入Vue.options.components下")])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("initAssertTypes")]),t._v(" "),i("p",[t._v("之前通过初始化components、filters、directives到Vue.options下为一个对象, 又在Vue下定义了Vue[component、filter、directive] = function() {}")]),t._v(" "),i("p",[t._v("我们可以知道内部具体实现方式:(拿最常用的component来说)")]),t._v(" "),i("ol",[i("li",[t._v("取内部Vue.options.components缓存")]),t._v(" "),i("li",[t._v("缓存没取到, "),i("font-bold",[t._v("利用Vue.extend重新定义组件选项为Vue子类, 并且生成组件name属性")]),t._v("(这个是之前模块里的追加疑问, 希望大家别忘记✨)")],1),t._v(" "),i("li",[t._v("推入到Vue.options.components下，key为第一个参数")]),t._v(" "),i("li",[t._v("返回Vue子类")])])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("initMixin$1")]),t._v(" "),i("p",[t._v("定义Vue.mixin函数, 内部其实比较简单，就是mergeOptions(options, mixin)")])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("initUse")]),t._v(" "),i("p",[t._v("定义Vue.use函数")]),t._v(" "),i("ol",[i("li",[t._v("取Vue._installPlugins缓存, 若有则不会二次执行")]),t._v(" "),i("li",[t._v("没有则重新定义参数列表, 替换第一个参数为Vue, 然后传入plugin函数里")]),t._v(" "),i("li",[t._v("{ install: function() {} } 和 function() {} 都可以执行")])])]),t._v(" "),i("p",[t._v("以上就是本期讲的全局api初始化，东西其实还是有点量的，大家可以多消化下~, 下一期我们来讲Vue的调用(初始化)")])])}),[],!1,null,null,null);s.default=e.exports}}]);